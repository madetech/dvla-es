service: sls-es

provider:
  name: aws
  stage: ${opt:stage}
  runtime: nodejs12.x
  region: eu-west-2
  environment:
    DB_NAME: sls-es-db-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
      Resource: !GetAtt SlsEsTable.Arn
    - Effect: Allow
      Action:
        - es:ESHttpPost
        - es:ESHttpPut
        - es:ESHttpDelete
        - es:ESHttpGet
      Resource:
        - !GetAtt ElasticSearchInstance.DomainArn
        - { Fn::Join: ["", [!GetAtt ElasticSearchInstance.DomainArn, "/*"]] }

package:
  individually: true

functions:
  data:
    handler: handler.data
    events:
      - http:
          method: post
          path: /data
    environment:
      REGION: ${self:provider.region}
  stream:
    handler: stream.run
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt SlsEsTable.StreamArn
          batchWindow: 20
          batchSize: 20
    environment:
      ES_ENDPOINT:
        Fn::Join:
          ["", ["https://", !GetAtt ElasticSearchInstance.DomainEndpoint]]

# you can add CloudFormation resource templates here
resources:
  Resources:
    SlsEsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DB_NAME}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        BillingMode: PAY_PER_REQUEST
    ElasticSearchInstance:
      Type: AWS::Elasticsearch::Domain
      Properties:
        EBSOptions:
          EBSEnabled: true
          VolumeType: gp2
          VolumeSize: 10
        ElasticsearchClusterConfig:
          InstanceType: t2.small.elasticsearch
          InstanceCount: 1
          DedicatedMasterEnabled: false
          ZoneAwarenessEnabled: false
        ElasticsearchVersion: 7.4
        AccessPolicies:
          Version: "2012-10-17"
          Statement:
            Action:
              - es:ESHttpGet
              - es:ESHttpPut
              - es:ESHttpPost
              - es:ESHttpHead
            Principal:
              AWS:
                [
                  Fn::Join:
                    [
                      ":",
                      [
                        "arn:aws:iam:",
                        { Ref: "AWS::AccountId" },
                        "role/${self:service}-${self:provider.stage}-eu-west-2-lambdaRole",
                      ],
                    ],
                ]
            Effect: Allow
